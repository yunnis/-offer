/*!
 * @file RebulidingABinaryTree
 * @brief 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
 *	例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 *
 * @author xuan
 * @date 2018-08-27
 */
#include <iostream>
#include <vector>
using namespace std;

/// @brief 树节点定义
///
///  left right 左右节点
///  x 节点的值
struct TreeNode
{
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode ( int x )
			: val ( x ), left ( NULL ), right ( NULL ) {}
};

class Solution {
public:
	/// @brief 通过先序 和 中序 重建二叉树
	///
	/// @param pre   先序序列
	/// @param vin   中序序列
	/// @return res  重建完的树
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
    	if ( pre.size() == 0 || vin.size() == 0 )
		{
			return NULL;
		}
		int i;
		// 先序遍历的0号位 肯定是树的根节点
		TreeNode *res = new TreeNode( pre[0] );
        // 在中序遍历中找到根节点
        for ( i = 0; i < vin.size(); i++ )
        {
            if( pre[0] == vin[i] )
            {
				break;
            }
        }
        // 分出左右子树
        vector<int> leftpre, leftvin, rightpre, rightvin;
        // left
        for ( int j = 0; j < i; j++)
		{
			leftpre.push_back( pre[j+1] ); //先序第一个节点为根节点
			leftvin.push_back( vin[j] );
		}
		// right
		for ( int j = i + 1; j < pre.size(); j++)
		{
			rightpre.push_back( pre[j] );
			rightvin.push_back( vin[j] );
		}
		// 遍历左子树 和 右子树
        res->left = reConstructBinaryTree( leftpre, leftvin );
        res->right = reConstructBinaryTree( rightpre, rightvin );
        return res;
    }
};

/// @brief 先序输出树
/// @param Root  要输出树的根节点
void printTree ( TreeNode *Root )
{
	if ( Root == NULL )
		return ;
	cout << Root->val << " " ;
	printTree ( Root->left );
	printTree ( Root->right );
}
/// @brief 输出vector
/// @param v  待输出的vector
void PrintVectorint ( vector<int> v )
{
	int size = v.size();
	for ( int i = 0; i < size; i++ )
		cout << v[i] << " ";
	cout << endl;
}

int main()
{
	TreeNode *a = new TreeNode(1);
	a->left = new TreeNode(2);
	a->right = new TreeNode(3);
	a->left->left = new TreeNode(4);
	a->left->left->right = new TreeNode(7);
	a->right->left = new TreeNode(5);
	a->left->right = new TreeNode(6);
	int pa[8] = { 1, 2, 4, 7, 3, 5, 6, 8 };
	int pb[8] = { 4, 7, 2, 1, 5 ,3, 8, 6 };
	vector<int> pre( pa, pa+8 );
	vector<int> vin;
	vin.insert( vin.begin(), pb, pb+8 );
	PrintVectorint( pre );
	PrintVectorint( vin );
	Solution s;
	printTree( s.reConstructBinaryTree( pre, vin ) );
    cout << endl;
    cout << "Hello world!" << endl;
    return 0;
}
