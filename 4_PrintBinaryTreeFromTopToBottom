//从上往下打印出二叉树的每个节点，同层节点从左至右打印。
#include <iostream>
#include <vector>
#include <queue>
using namespace std;


struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) { }
};
//广度优先遍历
class Solution {
public:
    vector<int> PrintFromTopToBottom(TreeNode* root) {
		//想到的是使用辅助队列
		//可实现先进先出
		//先输出该节点 将他的左右入队列 递归
		queue<TreeNode*> ass;
		vector<int> res;
		if(root == NULL)
			return res;
			//不为空先放入根节点
		ass.push(root);
		while(!ass.empty()){
			//当队列不为空时,把队头放入res
			res.push_back(ass.front()->val);
			//当前节点的 左子树 放入队列
			if(ass.front()->left != NULL)
				ass.push(ass.front()->left);
			//           右子树 放入队列
			if(ass.front()->right != NULL)
				ass.push(ass.front()->right);
			//弹出一位
			ass.pop();
		}
		return res;
    }
};

void printTree(TreeNode *Root){
	if(Root == NULL)
		return;
	cout << Root->val << " " ;
	printTree(Root->left);
	printTree(Root->right);
}

int main()
{
	TreeNode a1(1), b1(2), b2(3), c1(4), c2(5), c4(6);
    a1.left = &b1; a1.right = &b2;
    b1.left = &c1; b1.right = &c2; b2.right = &c4;
    Solution s;
    vector<int> res;
    printTree(&a1);
	res = s.PrintFromTopToBottom(&a1);
    for(int i = 0; i < res.size(); i++)
		cout << res[i] << " ";
    return 0;
}
