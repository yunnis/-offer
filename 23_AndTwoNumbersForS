#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    /**
     * @beirf 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，
     * 输出两个数的乘积最小的。
     * @param vector<int> array 输入的数组
     * @param int sum 两数之和
     * @return vector<int> 输出两数
     */
	// 暴力检索
    vector<int> FindNumbersWithSum1(vector<int> array,int sum) {
    	int a = 0,b = 0,c = INT_MAX; // a,b: 两数 c: 两数乘积
        for ( int i = 0; i < array.size(); i++ )
		{
			for ( int j = i + 1; j < array.size(); j++)
			{
				if ( array[i] + array[j] == sum )
				{
					if ( c > a*b )
					{
						a = array[i];
						b = array[j];
						c = a * b;
					}
					break;
				}
			}//for
		}//for
		vector<int> res;
		res.push_back(a);
		res.push_back(b);
		return res;
    }// FindNumbersWithSum
    // 前后相加
    vector<int> FindNumbersWithSum(vector<int> array,int sum) {
    	int left = 0, right = array.size()-1;
    	cout << array.size() << ' ' << array.size()-1;
        vector<int> res;
    	while ( left < right )
		{
			if ( array[left] + array[right] == sum )
			{
		        res.push_back(array[left]);
		        res.push_back(array[right]);
				break;
			}// if
			else if ( array[left] + array[right] > sum )
				right--;
			else
				left++;
		}// while
		return res;
    }// FindNumbersWithSum
};

int main()
{
	int a[6]{2,4,7,9,11,12};
	int b[20]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	vector<int> v(b,b+20), res;
	Solution s;
	res = s.FindNumbersWithSum(v,21);
	for ( auto c : res )
		cout << c;
    return 0;
}
