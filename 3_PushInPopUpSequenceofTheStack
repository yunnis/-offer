//输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
//假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
//但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

#include <iostream>
#include <vector>
#include <stack>
using namespace std;

class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
    	//因两者长度相同,所以一个为0另一个也为0,只判断一个即可
        if(pushV.size() == 0)
            return false;
		stack<int> pushin;
		//使用一个辅助栈,模拟进栈过程,
		//将pushV进栈,与popV比较,相同则删除此位出栈
		//不同则接着进栈,若stack.size() != 0 return false
		for(int i = 0, count = 0; i < pushV.size(); i++){
			pushin.push(pushV[i]);
      //当栈不为空 且 栈顶等于数组第一个值时弹出当前位
			while(!pushin.empty() && pushin.top() == popV[count]) {
				pushin.pop();
				count++;
			}//while
		}//for
		return pushin.empty();
    }//IsPopOrder
};

void PrintVector(vector<int> v) {
	for(int i = 0; i < v.size(); i++)
		cout << v[i];
	cout << endl;
}

int main()
{
	vector<int> in,out;
	int i;
	Solution s;
	in.resize(5);
	for(i = 0; i < in.size(); i++) {
		in[i] = i+1;
	}
	out.push_back(4); out.push_back(5); out.push_back(3); out.push_back(2); out.push_back(1);
	PrintVector(in);
	PrintVector(out);
	cout << s.IsPopOrder(in, out) << endl;
    cout << "Hello world!" << endl;
    return 0;
}
